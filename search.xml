<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>leetcode70. 爬楼梯</title>
    <url>/2022/04/08/leetcode70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：n = 2<br>输出：2</p>
</blockquote>
<p>解释：有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：n = 3<br>输出：3</p>
</blockquote>
<p>解释：有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
<p> </p>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= n &lt;= 45</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link" href="https://leetcode-cn.com/problems/climbing-stairs">https://leetcode-cn.com/problems/climbing-stairs<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.281ex" xmlns="http://www.w3.org/2000/svg" width="35.086ex" height="7.692ex" role="img" focusable="false" viewBox="0 -1950 15507.9 3400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2205.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3261.6,0)"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1051)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-551)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="81" y="1060" x="0" viewBox="0 14.3 889 81"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,0.398)"></path></svg><svg width="889" height="81" y="-641" x="0" viewBox="0 14.3 889 81"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,0.398)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,1200)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1761.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2761.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3261.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3872.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4872.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(5422.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5811.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6634.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7634.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(8134.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mtd" transform="translate(9523.3,0)"><g data-mml-node="mtext"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" transform="translate(556,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1334,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,0)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(9523.3,0)"><g data-mml-node="mtext"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(556,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1334,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1200)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(9523.3,0)"><g data-mml-node="mtext"><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" transform="translate(556,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1334,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(12246.3,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p>
<p>递归解法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> climbStairs(n<span class="number">-1</span>)+climbStairs(n<span class="number">-2</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>递归效率低，空间复杂度高，且发现重复求和，例如n=5,下列图解<br><img src="/images/tj_fiboRecusrive.png" alt="递归图解"></p>
<p>算法优化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">2</span>){</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="type">int</span> i = <span class="number">1</span>,j =<span class="number">2</span>;</span><br><span class="line">      <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">3</span>;k&lt;=n;++k){</span><br><span class="line">          sum=i+j;</span><br><span class="line">          i = j;</span><br><span class="line">          j = sum;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode46. 全排列</title>
    <url>/2022/04/07/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个不含重复数字的数组 nums ，返回其<strong>所有</strong>可能的全排列 。你可以<strong>按任意顺序</strong>返回答案。</p>
<p><strong>示例 1</strong>：</p>
<blockquote>
<p>输入：nums &#x3D; [1,2,3]<br>输出：[ [1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1] ]</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：nums &#x3D; [0,1]<br>输出：[ [0,1],[1,0] ]</p>
</blockquote>
<p><strong>示例 3：</strong></p>
<blockquote>
<p>输入：nums &#x3D; [1]<br>输出：[ [1] ]
 </p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; nums.length &lt;&#x3D; 6</li>
<li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li>
<li>nums 中的所有整数 互不相同</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link"   href="https://leetcode-cn.com/problems/permutations" >https://leetcode-cn.com/problems/permutations<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>以第一个数为基准，基准数不动，基准数后的数进行交换，完成一趟交换后，第2个数与基准数交换，依次再执行基准数后的交换，每个数都做基准数便截止。</p>
<p><img src="/images/tj_arrange.png" alt="排列图解"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> src,<span class="type">int</span> dest)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[src];</span><br><span class="line">        nums[src] = nums[dest];</span><br><span class="line">        nums[dest] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arrange</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> begin)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(begin==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//结束条件</span></span><br><span class="line">            List&lt;Integer&gt; t = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">                t.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(t);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;nums.length;i++)&#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                swap(nums,begin,i);</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                arrange(nums,begin+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//恢复</span></span><br><span class="line">                swap(nums,begin,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        arrange(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode206. 反转链表</title>
    <url>/2022/04/06/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例 1：</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="图片1"></p>
<blockquote>
<p>输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p>
</blockquote>
<p><strong>示例 2：</strong><br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"></p>
<blockquote>
<p>输入：head &#x3D; [1,2]<br>输出：[2,1]<br>示例 3：</p>
</blockquote>
<blockquote>
<p>输入：head &#x3D; []<br>输出：[]
 </p>
</blockquote>
<p><strong>提示：</strong></p>
<blockquote>
<p>链表中节点的数目范围是 [0, 5000]<br>-5000 &lt;&#x3D; Node.val &lt;&#x3D; 5000
 </p>
</blockquote>
<p>进阶：链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>
<p>来源：力扣（LeetCode）<br>链接：<a class="link"   href="https://leetcode-cn.com/problems/reverse-linked-list" >https://leetcode-cn.com/problems/reverse-linked-list<i class="fas fa-external-link-alt"></i></a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>迭代解法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">pre</span> =</span> <span class="literal">NULL</span>,*temp;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//保存下一个节点</span></span><br><span class="line">        temp = head-&gt;next;</span><br><span class="line">        <span class="comment">//指向前一个结点</span></span><br><span class="line">        head-&gt;next = pre;</span><br><span class="line">        <span class="comment">//当前结点作为下一趟遍历的前驱结点</span></span><br><span class="line">        pre = head;</span><br><span class="line">        <span class="comment">//恢复节点</span></span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>递归解法</strong><br>因为反转后需要将反转后的头节点返回出去，我这里用了临时变量进行了存储。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseListRecursiveDo</span><span class="params">(<span class="keyword">struct</span> ListNode* head,<span class="keyword">struct</span> ListNode** root)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        *root = head;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">   &#125;</span><br><span class="line">   reverseListRecursiveDo(head-&gt;next,root)-&gt;next = head;</span><br><span class="line">   <span class="comment">//第一个结点反转后的next指针应该指向NULL，避免回路</span></span><br><span class="line">   head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">root</span> =</span> (<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    reverseListRecursiveDo(head,&amp;root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算法优化，不需要临时变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转后的头节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">reverseHead</span> =</span> reverseList(head-&gt;next);</span><br><span class="line">    <span class="comment">//关键思路</span></span><br><span class="line">    <span class="comment">//假设存在链表：n1-&gt;n2-&gt;n3-&gt;n4-&gt;NULL,那么n3-&gt;n4的反转可以写成n3-&gt;next-&gt;next=n3;</span></span><br><span class="line">    head-&gt;next-&gt;next = head;</span><br><span class="line">    <span class="comment">//n1指向NULL,避免回路</span></span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> reverseHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode77. 组合</title>
    <url>/2022/04/08/leetcode77-%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p>
<p>你可以按<strong>任何顺序</strong>返回答案。</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：n &#x3D; 4, k &#x3D; 2<br>输出：<br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：n &#x3D; 1, k &#x3D; 1<br>输出：[[1]]
 </p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;&#x3D; n &lt;&#x3D; 20</li>
<li>1 &lt;&#x3D; k &lt;&#x3D; n</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link"   href="https://leetcode-cn.com/problems/combinations" >https://leetcode-cn.com/problems/combinations<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先画出树状图，理清思路，例如：n &#x3D; 4, k &#x3D; 2，</p>
<ol>
<li>以1为基准，和2，3，4组合，</li>
<li>以2为基准，和3，4组合，</li>
<li>以3为基准，和4组合</li>
<li>以4为基准，结束组合</li>
</ol>
<p>发现规律，基准数只与基准数后的数字依次组合，基准数&lt;&#x3D;n-k+1。利用回溯算法解题。</p>
<p><img src="/images/tj_combineBack.png" alt="组合图解"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        backRecursive(<span class="number">1</span>,n,k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backRecursive</span><span class="params">(<span class="type">int</span> begin,<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> depth)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth==k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(queue));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">        <span class="comment">//(n-(k-depth))是基准数结束条件</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=begin;i&lt;=(n-(k-depth));i++)&#123;</span><br><span class="line">            queue.offer(i);</span><br><span class="line">            backRecursive(i+<span class="number">1</span>,n,k,depth);</span><br><span class="line">            <span class="comment">//回溯到基准数</span></span><br><span class="line">            queue.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode784. 字母大小写全排列</title>
    <url>/2022/04/07/leetcode784-%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 s ，通过将字符串 s 中的每个字母转变大小写，我们可以获得一个新的字符串。<br>返回 所有可能得到的字符串集合 。以 任意顺序 返回输出。</p>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：s &#x3D; “a1b2”<br>输出：[“a1b2”, “a1B2”, “A1b2”, “A1B2”]</p>
</blockquote>
<p><strong>示例 2:</strong></p>
<blockquote>
<p>输入: s &#x3D; “3z4”<br>输出: [“3z4”,”3Z4”]
 </p>
</blockquote>
<p><strong>提示:</strong></p>
<ul>
<li>1 &lt;&#x3D; s.length &lt;&#x3D; 12</li>
<li>s 由小写英文字母、大写英文字母和数字组成</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link"   href="https://leetcode-cn.com/problems/letter-case-permutation" >https://leetcode-cn.com/problems/letter-case-permutation<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>从题目中可以观察到，出现一个大小写字母的字符就会出现两个版本，n个字符就会有2的n次幂个版本。<br>递归图解：<br><img src="/images/tj_lettersArrange.png" alt="大小写字母全排列"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        handleRecursive(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRecursive</span><span class="params">(StringBuilder strBuffer,<span class="type">int</span> curIndex)</span>&#123;</span><br><span class="line">        <span class="comment">//最后一个字符也会出现字母，所以结束条件是在遍历完所有字符后</span></span><br><span class="line">        <span class="keyword">if</span>(curIndex&gt;=strBuffer.length())&#123;</span><br><span class="line">            res.add(strBuffer.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> strBuffer.charAt(curIndex);</span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                handleRecursive(strBuffer,curIndex+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//版本1</span></span><br><span class="line">                handleRecursive(strBuffer,curIndex+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//字母大小写转换</span></span><br><span class="line">                <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                    strBuffer.setCharAt(curIndex,(<span class="type">char</span>)(ch-<span class="number">32</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                    strBuffer.setCharAt(curIndex,(<span class="type">char</span>)(ch+<span class="number">32</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//版本2（大小写转换）</span></span><br><span class="line">                handleRecursive(strBuffer,curIndex+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode994. 腐烂的橘子</title>
    <url>/2022/04/06/leetcode994-%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在给定的 <code>m x n</code> 网格 <code>grid</code> 中，每个单元格可以有以下三个值之一：</p>
<ul>
<li>值 0 代表空单元格；</li>
<li>值 1 代表新鲜橘子；</li>
<li>值 2 代表腐烂的橘子。</li>
</ul>
<p>每分钟，腐烂的橘子<strong>周围 4 个方向上相邻</strong>的新鲜橘子都会腐烂。</p>
<p>返回 直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。</p>
<p><strong>示例 1：</strong><br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png"></p>
<blockquote>
<p>输入：grid &#x3D; [[2,1,1],[1,1,0],[0,1,1]]<br>输出：4</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：grid &#x3D; [[2,1,1],[0,1,1],[1,0,1]]<br>输出：-1<br>解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</p>
</blockquote>
<p><strong>示例 3：</strong></p>
<blockquote>
<p>输入：grid &#x3D; [[0,2]]<br>输出：0<br>解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。
 </p>
</blockquote>
<p><strong>提示：</strong></p>
<ul>
<li>m &#x3D;&#x3D; grid.length</li>
<li>n &#x3D;&#x3D; grid[i].length</li>
<li>1 &lt;&#x3D; m, n &lt;&#x3D; 10</li>
<li>grid[i][j] 仅为 0、1 或 2</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link"   href="https://leetcode-cn.com/problems/rotting-oranges" >https://leetcode-cn.com/problems/rotting-oranges<i class="fas fa-external-link-alt"></i></a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意：<br>题目中存在多个腐烂橘子(多个源点)，所有腐烂的橘子会<strong>同时扩散</strong></p>
<p>思路:</p>
<ol>
<li>将所有腐烂橘子看作一个整体,赋一个初始值0，向外扩散。</li>
<li>被扩散腐烂的橘子消耗的分钟等于扩散点的值+1，依次继续扩散，直到扩散结束。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] xy= &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        Map&lt;Integer,Integer&gt; depth = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">int</span> m,n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">frish</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> grid[i][j];</span><br><span class="line">                <span class="keyword">if</span>(cur==<span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="comment">//初始0分钟</span></span><br><span class="line">                    depth.put(i*n+j,<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">//将所有腐烂的橘子预先加入队列中</span></span><br><span class="line">                    queue.addFirst(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//统计所有新鲜的橘子数量</span></span><br><span class="line">                    ++frish;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后一个腐烂橘子花费的时间</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 腐烂扩散(广度优先遍历)</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] cell = queue.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cell[<span class="number">0</span>],j = cell[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i+xy[k][<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j+xy[k][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">0</span> &amp;&amp; x&lt;m &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;n &amp;&amp; grid[x][y]==<span class="number">1</span>)&#123;</span><br><span class="line">                    grid[x][y]=<span class="number">2</span>;</span><br><span class="line">                    <span class="comment">//持续扩散</span></span><br><span class="line">                    queue.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                    <span class="comment">//花费的分钟等于传播点的值+1</span></span><br><span class="line">                    ans = depth.get(i*n+j)+<span class="number">1</span>;</span><br><span class="line">                    depth.put(x*n+y,ans);</span><br><span class="line">                    <span class="comment">//新鲜橘子数量减1</span></span><br><span class="line">                    --frish;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果还存在新鲜橘子则返回-1</span></span><br><span class="line">        <span class="keyword">return</span> frish==<span class="number">0</span>?ans:-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>多源bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>idea项目一键部署增强版（经验篇)</title>
    <url>/2022/04/05/idea%E9%A1%B9%E7%9B%AE%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%A2%9E%E5%BC%BA%E7%89%88%EF%BC%88%E7%BB%8F%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol>
<li>本次介绍的插件特别适用于小型单体项目部署，摆脱一切的繁琐部署操作，相对与CI&#x2F;CD流程配置更加简单快捷。</li>
<li>我们每次打包后的项目都特别大，其中主要是依赖的jar包占用了大量的空间，而且每次部署都进行了上传，但每次做修改的只有代码。</li>
<li>服务器性能弱，编译打包速度慢。</li>
<li><strong>所以选择本地打包，代码和jar包分离是提升部署效率的关键。</strong></li>
</ol>
<h2 id="1-idea配置"><a href="#1-idea配置" class="headerlink" title="1.idea配置"></a>1.idea配置</h2><p>1.安装插件（我这里已经安装好了）<br><img src="https://img-blog.csdnimg.cn/677e806c05c64ab8b34ba69d1c6f8307.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc29uZ2JpYW_kuLY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="2-toolkit配置"><a href="#2-toolkit配置" class="headerlink" title="2.toolkit配置"></a>2.toolkit配置</h2><p>1.安装后重启idea，点击add host添加服务器连接<br>host填对应部署的服务器公网ip<br>端口默认22<br>再填入username和password后点add添加即可。<br><img src="https://img-blog.csdnimg.cn/7168886be9044debb3181973a03fb211.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc29uZ2JpYW_kuLY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>2.点击idea标签页tools&#x2F;Alibaba colud&#x2F;Deploy to Host进入部署脚本页面<br>添加刚刚添加的服务器。</p>
<p><strong>下是部署脚本</strong><br><strong>改自己需要部署的端口和部署路径。</strong></p>
<p>before deploy：<br>项目上传前的清理操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /home/*; </span><br><span class="line">kill -9 $(netstat -nlp | grep :8080 | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;)</span><br></pre></td></tr></table></figure>
<p>after deploy:<br>上传后的部署启动操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -jar /home/xxx.ar &gt; nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>预览：<br><img src="https://img-blog.csdnimg.cn/2dca1b2c0969441588d017b292a248b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc29uZ2JpYW_kuLY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/5c602de2c23a4cc9924ecb6ac395da6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc29uZ2JpYW_kuLY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/31d0d4115d0d4aa2af0cad7521a60e5a.png" alt="在这里插入图片描述"><br>配置maven打包，跳过测试，提升效率<br><img src="https://img-blog.csdnimg.cn/c3bdbe2379854e2ba1a61ef6138a64c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc29uZ2JpYW_kuLY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>配置好后我们就可以点击run执行完成部署。<br><img src="https://img-blog.csdnimg.cn/a535a73d426945aa9548795aad0ed097.png" alt="在这里插入图片描述"><br>但是因为jar包太大部署的速度还是太慢了，下是提升部署速度的关键，采取下例配置后我的小项目一键部署只需10秒左右，十分方便上线测试，如果没有需求可以忽略。</p>
<h2 id="3-依赖包分离部署（关键）"><a href="#3-依赖包分离部署（关键）" class="headerlink" title="3.依赖包分离部署（关键）"></a>3.依赖包分离部署（关键）</h2><p>起始配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>
<p>将正常打包的jar包解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -xvf xxx.jar</span><br></pre></td></tr></table></figure>

<p><strong>将BOOT-INF&#x2F;lib文件夹先上传到服务器上，之后每次部署就不需要再上传依赖jar包了</strong></p>
<p>修改pom.xml，打包不带依赖的jar包，只包含项目代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;!--编译不带jar包--&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">               	&lt;!--指定启动类--&gt;</span><br><span class="line">                   &lt;mainClass&gt;xx.xx.xx&lt;/mainClass&gt;</span><br><span class="line">                   &lt;layout&gt;ZIP&lt;/layout&gt;</span><br><span class="line">                   &lt;includes&gt;</span><br><span class="line">                       &lt;include&gt;</span><br><span class="line">                           &lt;groupId&gt;nothing&lt;/groupId&gt;</span><br><span class="line">                           &lt;artifactId&gt;nothing&lt;/artifactId&gt;</span><br><span class="line">                       &lt;/include&gt;</span><br><span class="line">                   &lt;/includes&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">               &lt;executions&gt;</span><br><span class="line">                   &lt;execution&gt;</span><br><span class="line">                       &lt;goals&gt;</span><br><span class="line">                           &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">                       &lt;/goals&gt;</span><br><span class="line">                   &lt;/execution&gt;</span><br><span class="line">               &lt;/executions&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!--需要打包的文件--&gt;</span><br><span class="line">       &lt;resources&gt;</span><br><span class="line">           &lt;resource&gt;</span><br><span class="line">               &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">               &lt;includes&gt;</span><br><span class="line">                   &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">                   &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                   &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">               &lt;/includes&gt;</span><br><span class="line">               &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">           &lt;/resource&gt;</span><br><span class="line">           &lt;resource&gt;</span><br><span class="line">               &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">               &lt;includes&gt;</span><br><span class="line">                   &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">                   &lt;include&gt;**/*.properties&lt;/include&gt;</span><br><span class="line">                   &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">               &lt;/includes&gt;</span><br><span class="line">               &lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">           &lt;/resource&gt;</span><br><span class="line">       &lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure>
<p>打包后的项目从几百几十mb变成了几百kb。<br>修改after deploy:<br>path后指定你存放的lib绝对路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -Dloader.path=/home/lib -jar /home/xxx.ar &gt; nohup.log 2&gt;&amp;1 &amp; </span><br></pre></td></tr></table></figure>
<h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>均全自动部署(上传嗖的一下就过去了哦～)，接下来就是tea time~<br><img src="https://img-blog.csdnimg.cn/b3cf0b0e5a304ef1833342a58ccf71b0.gif" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>经验篇</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-sentinel哨兵攻略</title>
    <url>/2022/04/05/redis-sentinel%E5%93%A8%E5%85%B5%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>凌晨2点，你睡得正香，老板就突然打电话过来说，redis服务器炸了，网站瘫痪了！你不得不起床打开电脑开始苦逼的解决问题：重新配置redis，把项目的redis的地址切换到从节点的redis，然后重新打包项目，部署等一系列困扰你睡美梦的操作。<strong>然而，如果你配置redis哨兵，这一切将不会发生，你还可以继续睡你的美梦。</strong></p>
<h3 id="1-1sentinel-架构"><a href="#1-1sentinel-架构" class="headerlink" title="1.1sentinel 架构"></a>1.1sentinel 架构</h3><p>三个哨兵充当对redis实例的实时监控，如果主节点挂掉，哨兵察觉到后立即在两个从节点中选举新的master，当挂掉的主节点恢复正常后，充当新master的从节点。<br><img src="https://img-blog.csdnimg.cn/20201011162636574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MDA3MjI1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="2-主从配置"><a href="#2-主从配置" class="headerlink" title="2.主从配置"></a>2.主从配置</h2><p>你需要有三个redis实例，一个主节点和两个从节点<br>关于主从同步的配置可以看我的这篇博客<br><strong>注意：我的redis是5版本的</strong><br><a class="link"   href="https://blog.csdn.net/qq_26007225/article/details/108975751" >redis主从复制<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="3-sentinel配置"><a href="#3-sentinel配置" class="headerlink" title="3.sentinel配置"></a>3.sentinel配置</h2><p>在每一份redis实例上创建一份配置文件，在单机环境中，确保端口唯一即可（其他的配置不需要动）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动端口</span><br><span class="line">port 26379</span><br><span class="line">#监控主节点redis 服务名 ip和端口 当两个哨兵觉得主节点不可用时主节点下线</span><br><span class="line">sentinel monitor mymaster 主节点redis的ip 端口 2</span><br><span class="line">#5秒内主节点没有响应认定为挂掉了</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">#选举另一个master超时时间</span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line">#选举中 最多有一个从节点同步主节点</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br></pre></td></tr></table></figure>
<p>ok，现在我们的整个环境搭建，三个redis实例和三个sentinel实例，我是在单机的centos环境下测试，<strong>在这里请各位读者十分的注意自己的ip和端口避免弄错！</strong> 我这里使用的外网的ip，你可以用内网本地ip即可。</p>
<table>
<thead>
<tr>
<th>实例</th>
<th>ip:port</th>
</tr>
</thead>
<tbody><tr>
<td>redis1</td>
<td>192.168.72.134:6379</td>
</tr>
<tr>
<td>redis2</td>
<td>192.168.72.134:6380</td>
</tr>
<tr>
<td>redis3</td>
<td>192.168.72.134:6381</td>
</tr>
<tr>
<td>sentinel1</td>
<td>192.168.72.134:26379</td>
</tr>
<tr>
<td>sentinel2</td>
<td>192.168.72.134:26380</td>
</tr>
<tr>
<td>sentinel3</td>
<td>192.168.72.134:26381</td>
</tr>
</tbody></table>
<p>我们打开主节点redis实例客户端 查看具体信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]# redis</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">#角色是master 其他从节点为salve</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">#可以看到下面两个从节点实例 如果你的没有 请务必检查自己的操作步骤</span><br><span class="line">slave0:ip=192.168.72.134,port=6381,state=online,offset=28,lag=1</span><br><span class="line">slave1:ip=192.168.72.134,port=6380,state=online,offset=28,lag=1</span><br><span class="line">master_replid:7387ff36c2ebcf7d1440e07c5cc006c96ae414c3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:42</span><br></pre></td></tr></table></figure>
<p>我们启动三个哨兵实例，如下图<br><img src="https://img-blog.csdnimg.cn/20201011162233975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MDA3MjI1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>启动任一sentinel客户端，查看其信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]# redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; sentinel master mymaster</span><br><span class="line"> 1) &quot;name&quot;</span><br><span class="line"> 2) &quot;mymaster&quot;</span><br><span class="line"> 3) &quot;ip&quot;</span><br><span class="line"> 4) &quot;192.168.72.134&quot;</span><br><span class="line"> 5) &quot;port&quot;</span><br><span class="line"> 6) &quot;6379&quot;</span><br><span class="line"> 7) &quot;runid&quot;</span><br><span class="line"> 8) &quot;f51aee2ec220f0f662c248542bf9d03c86cc3834&quot;</span><br><span class="line"> 9) &quot;flags&quot;</span><br><span class="line">10) &quot;master&quot;</span><br><span class="line">11) &quot;link-pending-commands&quot;</span><br><span class="line">12) &quot;0&quot;</span><br><span class="line">13) &quot;link-refcount&quot;</span><br><span class="line">14) &quot;1&quot;</span><br><span class="line">15) &quot;last-ping-sent&quot;</span><br><span class="line">16) &quot;0&quot;</span><br><span class="line">17) &quot;last-ok-ping-reply&quot;</span><br><span class="line">18) &quot;514&quot;</span><br><span class="line">19) &quot;last-ping-reply&quot;</span><br><span class="line">20) &quot;514&quot;</span><br><span class="line">21) &quot;down-after-milliseconds&quot;</span><br><span class="line">22) &quot;5000&quot;</span><br><span class="line">23) &quot;info-refresh&quot;</span><br><span class="line">24) &quot;1239&quot;</span><br><span class="line">25) &quot;role-reported&quot;</span><br><span class="line">26) &quot;master&quot;</span><br><span class="line">27) &quot;role-reported-time&quot;</span><br><span class="line">28) &quot;121624&quot;</span><br><span class="line">29) &quot;config-epoch&quot;</span><br><span class="line">30) &quot;4&quot;</span><br><span class="line">31) &quot;num-slaves&quot;</span><br><span class="line">32) &quot;2&quot;</span><br><span class="line">33) &quot;num-other-sentinels&quot;</span><br><span class="line">34) &quot;2&quot;</span><br><span class="line">35) &quot;quorum&quot;</span><br><span class="line">36) &quot;2&quot;</span><br><span class="line">37) &quot;failover-timeout&quot;</span><br><span class="line">38) &quot;180000&quot;</span><br><span class="line">39) &quot;parallel-syncs&quot;</span><br><span class="line">40) &quot;1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到num-slaves和num-other-sentinels都是2，前者是从节点数量，后者是关联的哨兵数量，如果你的参数异常，请检查你的操作步骤。</p>
<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>查看当前的master<br>显然是我们前面哨兵配置中监听的主节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:26379&gt; SENTINEL get-master-addr-by-name mymaster</span><br><span class="line">1) &quot;192.168.72.134&quot;</span><br><span class="line">2) &quot;6379&quot;</span><br></pre></td></tr></table></figure>
<p>宕机测试：<br>现在我们关闭redis 6379实例30秒</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379 DEBUG sleep 30</span><br></pre></td></tr></table></figure>
<p>再查看主节点时发现已经切换6380端口的redis实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:26379&gt; SENTINEL get-master-addr-by-name mymaster</span><br><span class="line">1) &quot;192.168.72.134&quot;</span><br><span class="line">2) &quot;6380&quot;</span><br></pre></td></tr></table></figure>

<p>6379实例恢复时，我们可以看到它变成了从节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.72.134</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:415421</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:c6eba63129405a3f0fe2786b974fa2048179bafd</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:415421</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:393523</span><br><span class="line">repl_backlog_histlen:21899</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>本次教程就到此结束，请读者严格按照每一步操作来，避免踩坑。<br>当你再打开redis的配置文件查看最底部时，你会发现其中的主从配置ip和端口已经被sentinel动态的修改，每一次的宕机，sentinel都会对配置文件进行动态的修改。</p>
]]></content>
      <categories>
        <category>redis</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>redis主从复制完整攻略</title>
    <url>/2022/04/05/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%8C%E6%95%B4%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h2 id="1-主从配置"><a href="#1-主从配置" class="headerlink" title="1.主从配置"></a>1.主从配置</h2><h3 id="1-1单机"><a href="#1-1单机" class="headerlink" title="1.1单机"></a>1.1单机</h3><p>在服务器中copy一份redis.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]<span class="comment"># cp redis.conf slave-redis.cnf</span></span><br></pre></td></tr></table></figure>
<p>修改端口号、pid文件、指定主redis的ip和端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-5.0.3]<span class="comment"># vim slave-redis.cnf</span></span><br><span class="line"></span><br><span class="line">port 6380</span><br><span class="line"><span class="comment">#改为唯一即可</span></span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line"><span class="comment">#5版本后是replicaof 有的版本可能为slaveof 自己留意</span></span><br><span class="line">replicaof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<h3 id="1-2测试"><a href="#1-2测试" class="headerlink" title="1.2测试"></a>1.2测试</h3><p>启动redis从服务 启动端口为6380的客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server slave-redis.cnf </span><br><span class="line">redis-cli -p 6380</span><br></pre></td></tr></table></figure>
<p>在主redis上添加数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 1 1</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>从redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; get 1</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-同步原理"><a href="#2-同步原理" class="headerlink" title="2.同步原理"></a>2.同步原理</h2><p>如果你的redis仅当作缓存来使用，可以不必操太多的心，但是用到了持久化的功能，也就是当作一个数据库来使用，数据的持久性和一致性是必须得以重视！以下内容只针对主从同步原理做了讲解。</p>
<h3 id="2-1增量同步"><a href="#2-1增量同步" class="headerlink" title="2.1增量同步"></a>2.1增量同步</h3><p>主节点会将自己做出的指令存储到本地buffer中，然后从节点异步的读取指令来尽可能达到和主节点的数据一致，因为buffer的内存有限，buffer的内存结构是一个<strong>环形数组</strong>，从头写到尾时（写完一圈），将会覆盖之前的指令数据。<br><strong>注意：</strong> 如果，从节点网络状态不好，无法和主节点同步数据，没来的及的同步数据被覆盖掉，这时，就需要下面的快照同步。</p>
<h3 id="2-2快照同步"><a href="#2-2快照同步" class="headerlink" title="2.2快照同步"></a>2.2快照同步</h3><p>这是一个十分耗时的操作。<br>首先主节点会进行一次内存全盘扫描（bgsave），将内存中的所有数据写入到磁盘中，写入完毕时后传送到从节点，从节点接受完毕后，首先将内存清空，然后执行一次全量加载，再然后进行增量同步。<br><strong>注意：</strong> 在从节中快照同步的同时，主节点的操作指令依旧在写到buffer中，如果快照同步十分的耗时，以至于buffer中的指令又被覆盖，那么将陷入死循环中！<br><strong>为了避免死循环，请合适的设置buffer容量参数。</strong></p>
<h3 id="2-3无盘复制"><a href="#2-3无盘复制" class="headerlink" title="2.3无盘复制"></a>2.3无盘复制</h3><p>自redis 2.8.18版本后，引入了无盘复制，主节点直接通过套接字将内容传递给从节点。主节点一边遍历内存一边将序列化的内容传送到从节点中，从节点先将接收到的数据存入到磁盘中，最后执行一次全量加载。</p>
<p><strong>新加入的从节点，必须先进行一次快照同步，后再进行增量同步</strong></p>
<p>文章文献参考《redis深度历险核心原理与应用实践》</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>主从复制</tag>
      </tags>
  </entry>
  <entry>
    <title>非对称加密与数字证书</title>
    <url>/2022/04/05/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8E%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="一、信息传递"><a href="#一、信息传递" class="headerlink" title="一、信息传递"></a>一、信息传递</h2><p>事情是这样的,小明在青春懵懂的时候迷恋上了小红。<br><img src="https://img-blog.csdnimg.cn/20210612135732929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MDA3MjI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但得知小红和小华走的很近，并且每天都会发送短信聊天，小明很想知道小华和小红到底在聊些什么。</p>
<h3 id="1-信息窃取"><a href="#1-信息窃取" class="headerlink" title="1.信息窃取"></a>1.信息窃取</h3><p>在一次偶然的机会，小明打开了小红的手机，并查看了小红和小华的聊天记录，于是小明窃取到了小红和小华的聊天信息。</p>
<h3 id="2-信息加密"><a href="#2-信息加密" class="headerlink" title="2.信息加密"></a>2.信息加密</h3><p>而同学小赖将看到的这一切告诉了小红，小红很生气，很害怕信息再次泄露，于是，他和小华决定对信息进行加密，就算信息被小明看到也无济于事。</p>
<h2 id="二、对称加密"><a href="#二、对称加密" class="headerlink" title="二、对称加密"></a>二、对称加密</h2><p>聪明的小华想到，只要和小红事先约定好使用一个<strong>密钥</strong>。这样，小红把要发送的信息加密后发送，小华对接收的密文再用密钥进行解密。</p>
<blockquote>
<p><strong>对称加密</strong>，常用于密码加解密，应用场景相对简单，仅仅一个密钥。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20210612141757109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MDA3MjI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="1-密钥泄露"><a href="#1-密钥泄露" class="headerlink" title="1.密钥泄露"></a>1.密钥泄露</h3><p>很不凑巧的是，就在小华将密钥告诉小红的时候，被同学小赖给听到了。放学后，小赖以5根冰淇淋的代价告诉了小明。</p>
<blockquote>
<p>密钥的传递过程避免不了密钥的泄露，除非该密钥不传递</p>
</blockquote>
<p>小华知道后，很是懊恼，决定换一个密钥，但是聪明的小华想了想，有没有办法即使小明得到了密钥，小明也不能破译其中的信息呢?</p>
<h2 id="三、非对称加密"><a href="#三、非对称加密" class="headerlink" title="三、非对称加密"></a>三、非对称加密</h2><p>小华一夜未眠，在天亮之时，灵机一闪。<br>他发明了两个密钥，称为<strong>私钥</strong>和<strong>公钥</strong>。</p>
<blockquote>
<p>私钥可以解密公钥加密的信息，公钥也可以解密私钥加密的信息</p>
</blockquote>
<p>他首先将公钥告诉了小红，自己保留着除了上帝以外没有人知道的私钥，小红得到公钥后，将信息加密后发送给小华，小华再用私钥进行解密。<br><img src="https://img-blog.csdnimg.cn/20210612144538728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MDA3MjI1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即使小明能得到公钥，也不能对小红加密的信息进行破译。但是小华这时私钥加密的信息，就可能被拿到公钥的小明破解，于是，就需要小红再创建一对密钥，小红自己保留着私钥，将公钥告诉小华，小华再用小红的公钥加密信息后发送给小红，小红接受到后再用自己的私钥进行解密。</p>
<h2 id="四、进阶选读"><a href="#四、进阶选读" class="headerlink" title="四、进阶选读"></a>四、进阶选读</h2><h3 id="1-数字签名"><a href="#1-数字签名" class="headerlink" title="1.数字签名"></a>1.数字签名</h3><p>小华为了确保原信息没有被更改过，而给小红造成误解，于是小华将原信息进行hash，得到唯一的hash值，称为<strong>信息摘要</strong>，再用自己的私钥对hash值进行加密。<br>小华将原信息用小红的公钥进行加密后，连同信息摘要一同发送给小红（<strong>密文+信息摘要</strong>）。<br><img src="https://img-blog.csdnimg.cn/20210612151409837.png" alt="在这里插入图片描述"><br><strong>（上图中仅进行数字签名！）</strong></p>
<p>小红收到小华发送的信息后，首先用私钥将密文解密，将解密后的信息进行hash得到hash值，再通过小华的公钥对加密的信息摘要解密，得到小华书写的原信息的hash值，将两个hash值进行对比。</p>
<blockquote>
<p>如果hash值一致，表示原信息没有被修改，否则信息是被修改过的</p>
</blockquote>
<p>小红便可舍弃这个修改过的信息。</p>
<h3 id="2-数字证书"><a href="#2-数字证书" class="headerlink" title="2.数字证书"></a>2.数字证书</h3><p>可是让小华没想到的是，狡猾的小明也自己创建了一对密钥对，<strong>在小华给小红传递公钥的过程中，公钥被换成了小明自己的公钥</strong>，小红实际收到的是小明的公钥。这样小明便可以偷天换日，顶替了小华，这一举动称为<strong>中间人攻击</strong>。</p>
<p>让接收方知情发送者，解决的办法有两个。</p>
<h4 id="2-1公开公钥"><a href="#2-1公开公钥" class="headerlink" title="2.1公开公钥"></a>2.1公开公钥</h4><p>小华公开自己的公钥，小红在验证数字签名前，就已经知道小华的公钥是什么。</p>
<h4 id="2-2数字证书"><a href="#2-2数字证书" class="headerlink" title="2.2数字证书"></a>2.2数字证书</h4><p>公正的班长(证书中心)也有一对密钥对，并且在班上<strong>公开了自己的公钥</strong>。<br>小华再给小红发送信息时，只需要将小华自己的<strong>公钥、信息和数字签名</strong>一同交给班长。<br>班长用自己的私钥加密后，便得到真正可信的<strong>数字证书</strong>。<br>小华将其发送给小红，小红便用班长公开的公钥进行解密，真正得到了小华的公钥和相关信息。<br>小明知道班长公正无私，已经哭晕在了厕所。</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>笔者的理解，只要密钥涉及传递，一定避免不了密钥泄露。最常用的方式便是非对称加密，如目前的RSA加密算法。<br>https也是采用数字证书的方式，笔者没有深入去了解，就不展开了。</p>
<p>文章写到最后，笔者能力有限，文章存在知识误区，还请不吝指出，若文章对你有帮助，不妨点个赞对笔者支持一下把(●’◡’●)</p>
<p><em>文章图片素材全部来源于网络，侵权请联系我删除。</em> </p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>对称/非加密</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode780. 到达终点</title>
    <url>/2022/04/09/leetcode780-%E5%88%B0%E8%BE%BE%E7%BB%88%E7%82%B9/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定四个整数 sx , sy ，tx 和 ty，如果通过一系列的转换可以从起点 (sx, sy) 到达终点 (tx, ty)，则返回 true，否则返回 false。</p>
<p>从点 (x, y) 可以<strong>转换</strong>到 (x, x+y)  或者 (x+y, y)。</p>
<p> </p>
<p><strong>示例 1:</strong></p>
<blockquote>
<p>输入: sx = 1, sy = 1, tx = 3, ty = 5<br>输出: true<br>解释:<br>可以通过以下一系列转换从起点转换到终点：<br>(1, 1) -&gt; (1, 2)<br>(1, 2) -&gt; (3, 2)<br>(3, 2) -&gt; (3, 5)</p>
</blockquote>
<p><strong>示例 2:</strong></p>
<blockquote>
<p>输入: sx = 1, sy = 1, tx = 2, ty = 2<br>输出: false</p>
</blockquote>
<p><strong>示例 3:</strong></p>
<blockquote>
<p>输入: sx = 1, sy = 1, tx = 1, ty = 1<br>输出: true
 </p>
</blockquote>
<p><strong>提示:</strong></p>
<ul>
<li>1 &lt;= sx, sy, tx, ty &lt;= <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></g></svg></mjx-container></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a class="link" href="https://leetcode-cn.com/problems/reaching-points">https://leetcode-cn.com/problems/reaching-points<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>画出树状结构分析，正向计算会出现很多种状态，计算量复杂，本题应从反向计算，即从终点往起点推理。<br>假设</p>
<ul>
<li><code>tx&gt;ty</code><br>(tx,ty)的上一个状态便是(tx-ty,ty);</li>
<li><code>tx&lt;ty</code><br>(tx,ty)的上一个状态便是(ty,ty-tx);<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex" xmlns="http://www.w3.org/2000/svg" width="39.652ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 17526.1 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1300,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1872,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2316.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2677.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3167.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3834.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4890.2,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1210.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2266.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2627.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mspace" transform="translate(3199.6,0)"></g><g data-mml-node="mi" transform="translate(4033.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(5922.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(6089.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(6422.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6783.9,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mtd" transform="translate(8273.9,0)"></g><g data-mml-node="mtd" transform="translate(9273.9,0)"><g data-mml-node="mtext"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(389,0)"></path><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" transform="translate(917,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1695,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(2084,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1128.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2184.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2545.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mspace" transform="translate(3035.6,0)"></g><g data-mml-node="mi" transform="translate(3869.2,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(5758.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(5925.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(6258.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6619.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mtd" transform="translate(8273.9,0)"></g><g data-mml-node="mtd" transform="translate(9273.9,0)"><g data-mml-node="mtext"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(389,0)"></path><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z" transform="translate(917,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1695,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(2084,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(12635.9,0) translate(0 250)"></g></g></g></g></svg></mjx-container></li>
<li>至于这里为什么用<code>mod</code>模运算，是考虑存在tx特别小,ty特别大(或者tx特别大，ty特别小)的多次减法的情况，解决这种冗余的运算便是<strong>辗转相除法</strong>。</li>
<li>结束条件：<ul>
<li><code>sx==tx &amp;&amp; sy==ty</code> 起点可以到达终点</li>
<li><code>tx==sx</code>时,判断 <code>ty&gt;tx &amp;&amp; (ty-sy) % sx == 0</code> 起点是否可以到达终点</li>
<li><code>ty==sy</code>时,判断 <code>tx&gt;ty &amp;&amp; (tx-sx) % sy == 0</code> 起点是否可以到达终点</li>
</ul>
</li>
<li>解释：<ul>
<li><code>tx==sx</code>时,判断 <code>ty&gt;tx &amp;&amp; (ty-sy) % sx == 0</code>，当sx==tx且ty!=sy时，该数的上一个状态只能是(tx,ty-tx),所以ty要大于tx。</li>
<li><code>(ty-sy) % sx == 0</code>时,解决ty大数的情况,如：sx=1,sx=6,tx=1,ty=100000。</li>
</ul>
</li>
</ul>
<p><strong>递归解法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">reachingPoints</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy, <span class="type">int</span> tx, <span class="type">int</span> ty)</span>{</span><br><span class="line">    <span class="keyword">if</span>(tx&lt;sx || ty&lt;sy){</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(tx==sx &amp;&amp; ty==sy){</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(tx==sx){</span><br><span class="line">        <span class="keyword">return</span> ty&gt;tx &amp;&amp; (ty-tx) % sy == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(ty==sy){</span><br><span class="line">        <span class="keyword">return</span> tx&gt;ty &amp;&amp; (tx-ty) % sx == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(tx&gt;ty){</span><br><span class="line">        <span class="keyword">return</span> reachingPoints(sx,sy, tx%ty, ty);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> reachingPoints(sx,sy, tx, ty%tx);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2022/04/10/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>观察者模式又称发布&#x2F;订阅模式，用于观察某一个对象产生的变化，发布者无需维护订阅者，订阅者与发布者解耦。<br>例如生活中，停车位是人们一直苦恼的事情，如果我们能够对车库车位进行实时观察，得到车位信息，是一大便捷的事情。</p>
<p><img src="/images/tj_observer.png" alt="代码结构"></p>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>抽象是为了更好扩展。<br>抽象出发布者，提供订阅方法供订阅者调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布者抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songbiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> abstractObserver 观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否订阅成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">subcribe</span><span class="params">(AbstractObserver abstractObserver)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消订阅</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> abstractObserver 观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否取消订阅成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">removeSubcribe</span><span class="params">(AbstractObserver abstractObserver)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>订阅者抽象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅者抽象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songbiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractObserver</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(Event event)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用于消息通知的事件接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songbiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Event</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>车辆实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">int</span> id, String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, info=&#x27;&quot;</span> + info + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>车辆通知事件,实现Event接口，用于事件通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarEvent</span> <span class="keyword">implements</span> <span class="title class_">Event</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car curCarInfo;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCurCarInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> curCarInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CarEvent</span><span class="params">(Car curCarInfo, String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.curCarInfo = curCarInfo;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CarEvent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;curCarInfo=&quot;</span> + curCarInfo +</span><br><span class="line">                <span class="string">&quot;, type=&quot;</span> + type +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>发布者实现(车库),实现AbstractProducer抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车库订阅发现实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Garage</span> <span class="keyword">extends</span> <span class="title class_">AbstractProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractObserver&gt; subcriberList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车辆停放集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Car&gt; parkList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">subcribe</span><span class="params">(AbstractObserver observer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> subcriberList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeSubcribe</span><span class="params">(AbstractObserver observer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> subcriberList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车辆离开</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> car 车辆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">carLeave</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        parkList.remove(car);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarEvent</span>(car,<span class="string">&quot;车辆离开&quot;</span>);</span><br><span class="line">        subcriberList.parallelStream().forEach(observer -&gt; &#123;</span><br><span class="line">            observer.onEvent(event);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车辆进入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> car 车辆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">enterCar</span><span class="params">(Car car)</span>&#123;</span><br><span class="line">        parkList.add(car);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarEvent</span>(car,<span class="string">&quot;车辆进入&quot;</span>);</span><br><span class="line">        subcriberList.parallelStream().forEach(observer -&gt; &#123;</span><br><span class="line">            observer.onEvent(event);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>车库订阅者通知实现类,实现AbstractObserver抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarObserver</span> <span class="keyword">extends</span> <span class="title class_">AbstractObserver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="comment">//打印车库事件消息</span></span><br><span class="line">        System.out.println(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个车库观察者</span></span><br><span class="line">        <span class="type">CarObserver</span> <span class="variable">carObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarObserver</span>();</span><br><span class="line">        <span class="comment">//被观察者</span></span><br><span class="line">        <span class="type">Garage</span> <span class="variable">garage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Garage</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加观察者</span></span><br><span class="line">        garage.subcribe(carObserver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">fa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">1</span>, <span class="string">&quot;法拉利&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">lb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="number">2</span>, <span class="string">&quot;兰博基尼&quot;</span>);</span><br><span class="line"></span><br><span class="line">        garage.enterCar(fa);</span><br><span class="line">        garage.enterCar(lb);</span><br><span class="line">        garage.carLeave(lb);</span><br><span class="line">        garage.carLeave(fa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CarEvent&#123;curCarInfo=Car&#123;id=1, info=&#x27;法拉利&#x27;&#125;, type=车辆进入&#125;</span><br><span class="line">CarEvent&#123;curCarInfo=Car&#123;id=2, info=&#x27;兰博基尼&#x27;&#125;, type=车辆进入&#125;</span><br><span class="line">CarEvent&#123;curCarInfo=Car&#123;id=2, info=&#x27;兰博基尼&#x27;&#125;, type=车辆离开&#125;</span><br><span class="line">CarEvent&#123;curCarInfo=Car&#123;id=1, info=&#x27;法拉利&#x27;&#125;, type=车辆离开&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>发布/订阅</tag>
      </tags>
  </entry>
</search>
